#!/usr/bin/env ruby

preprocess do
  # authors may unpublish items by setting meta attribute publish: false
  items.delete_if { |item| item[:publish] == false }

  #copy_static
  create_tag_pages
  add_update_item_attributes
end

compile '/robots/' do
  filter :erb
end

compile '/sitemap/' do
  filter :erb
end

compile '/blog/' do
  filter :haml
  layout 'blogindex'
end

compile '/blog/tags/' do
  filter :haml
  layout 'blogindex'
end

compile '/blog/tags/*/' do
  filter :haml
  layout 'blogindex'
end

compile '/blog/atom/' do
  filter :erb
end

compile '/blog/archives/' do
  filter :haml
  layout 'blogindex'
end

compile '/blog/*/*/' do
  # item[:extension] returns 'html.erb' for multi-dotted filename
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last

  if ext == 'erb'
    filter :erb
  elsif ext == 'haml' || ext.nil?
    filter :haml
  elsif ext == 'md' || ext == 'markdown'
    filter :erb
    filter :rdiscount
  else
    raise "Filter is not configured for #{item.identifier} in Rules file."
  end

  # use layouts with .html extension or layout specified in meta
  #item[:layout] = "none" unless item[:layout] || File.extname(route_path(item)) == '.html' 

  layout 'blogpost'
end

compile '/resume/' do
    filter :haml
end

compile '*' do
  # item[:extension] returns 'html.erb' for multi-dotted filename
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last

  if ext == 'erb'
    filter :erb
  elsif ext == 'haml' || ext.nil?
    filter :haml
  elsif ext == 'md' || ext == 'markdown'
    filter :erb
    filter :rdiscount
  else
    raise "Filter is not configured for #{item.identifier} in Rules file."
  end

  # use layouts with .html extension or layout specified in meta
  #item[:layout] = "none" unless item[:layout] || File.extname(route_path(item)) == '.html' 

  layout 'default' unless item[:layout] == "none"
end

route '/robots/' do
  '/robots.txt'
end

route '/sitemap/' do
  '/sitemap.xml'
end

route '/blog/atom/' do
  '/blog/atom.xml'
end

route '/index/' do
  '/index.html'
end

route '*' do
  rule_route_path(item)
end

layout '*', :haml, :format => :html5, :ugly => false, :escape_html => false
